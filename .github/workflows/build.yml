name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
    
    - name: Install Linux dependencies (amd64 native)
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          libgl1-mesa-dev xorg-dev pkg-config gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Configure apt sources for arm64 (ubuntu-ports)
      run: |
        # Restrict default sources to amd64 to avoid apt fetching arm64 from non-ports mirrors
        sudo sed -i 's/^deb \(http\|https\)/deb [arch=amd64] \1/g' /etc/apt/sources.list
        source /etc/os-release
        CODENAME=${VERSION_CODENAME:-noble}
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${CODENAME} main universe multiverse" | sudo tee /etc/apt/sources.list.d/ubuntu-arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${CODENAME}-updates main universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ubuntu-arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${CODENAME}-security main universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ubuntu-arm64.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports ${CODENAME}-backports main universe multiverse" | sudo tee -a /etc/apt/sources.list.d/ubuntu-arm64.list
        sudo dpkg --add-architecture arm64
        sudo apt-get update -qq

    - name: Install Linux cross dependencies (arm64)
      run: |
        # core cross toolchain + libc headers
        sudo apt-get install -y --no-install-recommends \
          libc6-dev-arm64-cross pkg-config-aarch64-linux-gnu
        # X11/OpenGL headers for arm64 (Fyne/GLFW needs these)
        sudo apt-get install -y --no-install-recommends \
          libx11-dev:arm64 libxcursor-dev:arm64 libxrandr-dev:arm64 libxinerama-dev:arm64 libxi-dev:arm64 \
          libxxf86vm-dev:arm64 libgl1-mesa-dev:arm64 libegl1-mesa-dev:arm64 libgles2-mesa-dev:arm64
    
    - name: Build Linux AMD64
      run: |
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o warpmini-linux-amd64 ./cmd/warpmini
        chmod +x warpmini-linux-amd64
        tar -czf warpmini-linux-amd64.tar.gz warpmini-linux-amd64
    
    - name: Build Linux ARM64
      env:
        CC: aarch64-linux-gnu-gcc
        PKG_CONFIG: aarch64-linux-gnu-pkg-config
        PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
      run: |
        CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o warpmini-linux-arm64 ./cmd/warpmini
        chmod +x warpmini-linux-arm64
        tar -czf warpmini-linux-arm64.tar.gz warpmini-linux-arm64
    
    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: |
          warpmini-linux-amd64.tar.gz
          warpmini-linux-arm64.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Setup MSYS2 (mingw64)
      uses: msys2/setup-msys2@v2
      with:
        update: true
        msystem: MINGW64
        install: >-
          mingw-w64-x86_64-gcc
          zip

    - name: Detect Go path (for MSYS2)
      shell: powershell
      run: |
        $p = (Get-Command go).Source
        echo "GO_BIN=$p" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: Build Windows AMD64 (CGO)
      shell: msys2 {0}
      env:
        CGO_ENABLED: '1'
        GOOS: windows
        GOARCH: amd64
        CC: x86_64-w64-mingw32-gcc
        GO_BIN: ${{ env.GO_BIN }}
      run: |
        GO=$(cygpath -u "$GO_BIN")
        "$GO" build -trimpath -ldflags "-s -w -H windowsgui -X main.Version=${{ github.ref_name }}" -o warpmini-windows-amd64.exe ./cmd/warpmini
        zip -r warpmini-windows-amd64.zip warpmini-windows-amd64.exe

    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          warpmini-windows-amd64.zip

  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true
    
    - name: Build macOS AMD64
      run: |
        CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o warpmini-darwin-amd64 ./cmd/warpmini
        chmod +x warpmini-darwin-amd64
    
    - name: Build macOS ARM64
      run: |
        CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.Version=${{ github.ref_name }}" -o warpmini-darwin-arm64 ./cmd/warpmini
        chmod +x warpmini-darwin-arm64
    
    - name: Create Universal Binary
      run: |
        lipo -create -output warpmini-darwin-universal warpmini-darwin-amd64 warpmini-darwin-arm64
        chmod +x warpmini-darwin-universal
        tar -czf warpmini-darwin-amd64.tar.gz warpmini-darwin-amd64
        tar -czf warpmini-darwin-arm64.tar.gz warpmini-darwin-arm64
        tar -czf warpmini-darwin-universal.tar.gz warpmini-darwin-universal
    
    - name: Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          warpmini-darwin-amd64.tar.gz
          warpmini-darwin-arm64.tar.gz
          warpmini-darwin-universal.tar.gz

  release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: WarpMini ${{ github.ref_name }}
        body: |
          ## WarpMini ${{ github.ref_name }}
          
          ### 下载说明
          - **macOS**: 下载 `warpmini-darwin-universal.tar.gz` (支持 Intel 和 Apple Silicon)
          - **Windows**: 下载 `warpmini-windows-amd64.zip` (64位)
          - **Linux**: 下载 `warpmini-linux-amd64.tar.gz` (x64) 或 `warpmini-linux-arm64.tar.gz` (ARM64)
          
          ### 使用方法
          1. 解压下载的文件
          2. 运行 warpmini 可执行文件
          3. 输入你的 refresh_token
          4. 点击登录按钮
        files: |
          linux-builds/*
          windows-builds/*
          macos-builds/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
