name: Build and Release

on:
  push:
    tags:
      - "v*"
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
          cache: true

      - name: Compute version
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          else
            echo "VERSION=${GITHUB_REF_NAME}-${GITHUB_SHA::7}" >> $GITHUB_ENV
          fi

      - name: Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends libgl1-mesa-dev xorg-dev

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: |
          set -euo pipefail
          CGO_ENABLED=1 GOOS=linux GOARCH=$(go env GOARCH) go build -trimpath -ldflags "-s -w -X main.Version=${VERSION}" -o warpmini-linux-$(go env GOARCH) ./cmd/warpmini
          chmod +x warpmini-linux-$(go env GOARCH)
          tar -czf warpmini-linux-$(go env GOARCH).tar.gz warpmini-linux-$(go env GOARCH)

      - name: Setup MSYS2 (Windows)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            mingw-w64-x86_64-gcc
            zip

      - name: Detect Go path (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          $p = (Get-Command go).Source
          "GO_BIN=$p" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Build (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        env:
          CGO_ENABLED: '1'
          GOOS: windows
          GOARCH: amd64
          CC: x86_64-w64-mingw32-gcc
          GO_BIN: ${{ env.GO_BIN }}
        run: |
          set -euo pipefail
          GO=$(cygpath -u "$GO_BIN")
          "$GO" build -trimpath -ldflags "-s -w -H windowsgui -X main.Version=${VERSION}" -o warpmini-windows-amd64.exe ./cmd/warpmini
          zip -r warpmini-windows-amd64.zip warpmini-windows-amd64.exe

      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: |
          set -euo pipefail
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -trimpath -ldflags "-s -w -X main.Version=${VERSION}" -o warpmini-darwin-amd64 ./cmd/warpmini
          CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -trimpath -ldflags "-s -w -X main.Version=${VERSION}" -o warpmini-darwin-arm64 ./cmd/warpmini
          lipo -create -output warpmini-darwin-universal warpmini-darwin-amd64 warpmini-darwin-arm64
          chmod +x warpmini-darwin-amd64 warpmini-darwin-arm64 warpmini-darwin-universal
          tar -czf warpmini-darwin-amd64.tar.gz warpmini-darwin-amd64
          tar -czf warpmini-darwin-arm64.tar.gz warpmini-darwin-arm64
          tar -czf warpmini-darwin-universal.tar.gz warpmini-darwin-universal

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-artifacts
          if-no-files-found: error
          path: |
            *.tar.gz
            *.zip

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: WarpMini ${{ github.ref_name }}
          body: |
            ## WarpMini ${{ github.ref_name }}

            下载说明
            - macOS: warpmini-darwin-universal.tar.gz（支持 Intel 和 Apple Silicon）
            - Windows: warpmini-windows-amd64.zip（64位）
            - Linux: warpmini-linux-amd64.tar.gz（x64）
          files: dist/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
